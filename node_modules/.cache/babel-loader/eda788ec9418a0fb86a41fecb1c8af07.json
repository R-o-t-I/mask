{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onChange\", \"defaultValue\", \"min\", \"max\", \"value\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { clamp } from \"../../helpers/math\";\nimport { UniversalSlider } from \"../RangeSlider/UniversalSlider\";\n\nvar Slider = function Slider(_ref) {\n  var onChange = _ref.onChange,\n      defaultValue = _ref.defaultValue,\n      _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 0 : _ref$min,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 100 : _ref$max,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? 0 : _ref$value,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var isControlled = value != null;\n\n  var _React$useState = React.useState(defaultValue == null ? min : defaultValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      localValue = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _value = clamp(isControlled ? value : localValue, min, max);\n\n  var handleChange = React.useCallback(function (nextValue, event) {\n    if (props.disabled || _value === nextValue[1]) {\n      return;\n    }\n\n    !isControlled && setValue(nextValue[1]);\n    onChange && onChange(nextValue[1], event);\n  }, [props.disabled, _value, isControlled, onChange]);\n  var rangeValue = React.useMemo(function () {\n    return [null, _value];\n  }, [_value]);\n  return createScopedElement(UniversalSlider, _extends({}, props, {\n    value: rangeValue,\n    onChange: handleChange,\n    min: min,\n    max: max\n  }));\n}; // eslint-disable-next-line import/no-default-export\n\n\nexport default Slider;","map":null,"metadata":{},"sourceType":"module"}