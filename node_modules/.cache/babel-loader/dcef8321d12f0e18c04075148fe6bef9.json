{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"primary\", \"label\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport Tappable from \"../Tappable/Tappable\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { classNames } from \"../../lib/classNames\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { getTitleFromChildren, isPrimitiveReactNode } from \"../../lib/utils\";\nimport { IOS, VKCOM, ANDROID } from \"../../lib/platform\";\nimport Text from \"../Typography/Text/Text\";\nimport Title from \"../Typography/Title/Title\";\n\nvar ButtonTypography = function ButtonTypography(_ref) {\n  var primary = _ref.primary,\n      children = _ref.children;\n  var platform = usePlatform();\n\n  if (platform === IOS) {\n    return createScopedElement(Title, {\n      Component: \"span\",\n      level: \"3\",\n      weight: primary ? \"1\" : \"3\"\n    }, children);\n  }\n\n  return createScopedElement(Text, {\n    weight: platform === VKCOM ? \"regular\" : \"medium\"\n  }, children);\n};\n\nvar warn = warnOnce(\"PanelHeaderButton\");\nexport var PanelHeaderButton = function PanelHeaderButton(_ref2) {\n  var children = _ref2.children,\n      _ref2$primary = _ref2.primary,\n      primary = _ref2$primary === void 0 ? false : _ref2$primary,\n      label = _ref2.label,\n      restProps = _objectWithoutProperties(_ref2, _excluded);\n\n  var isPrimitive = isPrimitiveReactNode(children);\n  var isPrimitiveLabel = isPrimitiveReactNode(label);\n  var platform = usePlatform();\n  var hoverMode;\n  var activeMode;\n\n  switch (platform) {\n    case ANDROID:\n      hoverMode = \"background\";\n      activeMode = \"background\";\n      break;\n\n    case IOS:\n      hoverMode = \"background\";\n      activeMode = \"opacity\";\n      break;\n\n    case VKCOM:\n      hoverMode = \"PanelHeaderButton--hover\";\n      activeMode = \"PanelHeaderButton--active\";\n  }\n\n  if (process.env.NODE_ENV === \"development\") {\n    var hasAccessibleName = Boolean(getTitleFromChildren(children) || getTitleFromChildren(label) || restProps[\"aria-label\"] || restProps[\"aria-labelledby\"]);\n\n    if (!hasAccessibleName) {\n      warn(\"a11y: У кнопки нет названия, которое может прочитать скринридер, и она недоступна для части пользователей. Замените содержимое на текст или добавьте описание действия с помощью пропа aria-label.\");\n    }\n  }\n\n  return createScopedElement(Tappable, _extends({}, restProps, {\n    hoverMode: hoverMode,\n    Component: restProps.href ? \"a\" : \"button\",\n    activeEffectDelay: 200,\n    activeMode: activeMode,\n    vkuiClass: classNames(getClassName(\"PanelHeaderButton\", platform), {\n      \"PanelHeaderButton--primary\": primary,\n      \"PanelHeaderButton--primitive\": isPrimitive,\n      \"PanelHeaderButton--notPrimitive\": !isPrimitive && !isPrimitiveLabel\n    })\n  }), isPrimitive ? createScopedElement(ButtonTypography, {\n    primary: primary\n  }, children) : children, isPrimitiveLabel ? createScopedElement(ButtonTypography, {\n    primary: primary\n  }, label) : label);\n};","map":null,"metadata":{},"sourceType":"module"}