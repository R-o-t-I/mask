{"ast":null,"code":"import * as React from \"react\"; // Является ли переданное значение числовым\n\nexport function isNumeric(value) {\n  return !isNaN(parseFloat(value)) && isFinite(value);\n} // Является ли переданное значение функцией\n\nexport function isFunction(value) {\n  return typeof value === \"function\";\n}\nexport function debounce(fn, delay) {\n  var timeout;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      return fn.apply(void 0, args);\n    }, delay);\n  };\n}\nexport function leadingZero(val) {\n  var strVal = val.toFixed();\n\n  if (strVal.length === 1) {\n    return \"0\" + strVal;\n  }\n\n  return strVal;\n}\nexport function hasReactNode(value) {\n  return value !== undefined && value !== false && value !== null && value !== \"\";\n}\nexport function isPrimitiveReactNode(node) {\n  return typeof node === \"string\" || typeof node === \"number\";\n}\nexport function setRef(element, ref) {\n  if (ref) {\n    if (typeof ref === \"function\") {\n      ref(element);\n    } else {\n      ref.current = element;\n    }\n  }\n}\nexport function multiRef() {\n  for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    refs[_key2] = arguments[_key2];\n  }\n\n  var current = null;\n  return {\n    get current() {\n      return current;\n    },\n\n    set current(element) {\n      current = element;\n      refs.forEach(function (ref) {\n        return ref && setRef(element, ref);\n      });\n    }\n\n  };\n} // eslint-disable-next-line\n\nexport var noop = function noop() {};\nexport function getTitleFromChildren(children) {\n  var label = \"\";\n  React.Children.map(children, function (child) {\n    if (typeof child === \"string\") {\n      label += child;\n    }\n  });\n  return label;\n}\nexport var generateRandomId = function generateRandomId() {\n  return Math.random().toString(36).replace(/[^a-z]+/g, \"\");\n};","map":null,"metadata":{},"sourceType":"module"}