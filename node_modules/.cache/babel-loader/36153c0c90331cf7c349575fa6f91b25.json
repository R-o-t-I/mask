{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onStart\", \"onStartX\", \"onStartY\", \"onMove\", \"onMoveX\", \"onMoveY\", \"onLeave\", \"onEnter\", \"onEnd\", \"onEndX\", \"onEndY\", \"onClickCapture\", \"usePointerHover\", \"slideThreshold\", \"useCapture\", \"Component\", \"getRootRef\", \"noSlideClick\", \"stopPropagation\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { getSupportedEvents, coordX, coordY, touchEnabled } from \"../../lib/touch\";\nimport { useDOM } from \"../../lib/dom\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { useEventListener } from \"../../hooks/useEventListener\";\nimport { useIsomorphicLayoutEffect } from \"../../lib/useIsomorphicLayoutEffect\";\nexport var Touch = function Touch(_ref) {\n  var onStart = _ref.onStart,\n      onStartX = _ref.onStartX,\n      onStartY = _ref.onStartY,\n      _onMove = _ref.onMove,\n      onMoveX = _ref.onMoveX,\n      onMoveY = _ref.onMoveY,\n      onLeave = _ref.onLeave,\n      onEnter = _ref.onEnter,\n      _onEnd = _ref.onEnd,\n      onEndX = _ref.onEndX,\n      onEndY = _ref.onEndY,\n      onClickCapture = _ref.onClickCapture,\n      usePointerHover = _ref.usePointerHover,\n      _ref$slideThreshold = _ref.slideThreshold,\n      slideThreshold = _ref$slideThreshold === void 0 ? 5 : _ref$slideThreshold,\n      _ref$useCapture = _ref.useCapture,\n      useCapture = _ref$useCapture === void 0 ? false : _ref$useCapture,\n      _ref$Component = _ref.Component,\n      Component = _ref$Component === void 0 ? \"div\" : _ref$Component,\n      getRootRef = _ref.getRootRef,\n      _ref$noSlideClick = _ref.noSlideClick,\n      noSlideClick = _ref$noSlideClick === void 0 ? false : _ref$noSlideClick,\n      _ref$stopPropagation = _ref.stopPropagation,\n      stopPropagation = _ref$stopPropagation === void 0 ? false : _ref$stopPropagation,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var _useDOM = useDOM(),\n      document = _useDOM.document;\n\n  var events = React.useMemo(getSupportedEvents, []);\n  var didSlide = React.useRef(false);\n  var gesture = React.useRef(null);\n\n  var handle = function handle(e, handers) {\n    stopPropagation && e.stopPropagation();\n    handers.forEach(function (cb) {\n      var _gesture$current$star, _gesture$current, _gesture$current$star2;\n\n      var duration = Date.now() - ((_gesture$current$star = (_gesture$current = gesture.current) === null || _gesture$current === void 0 ? void 0 : (_gesture$current$star2 = _gesture$current.startT) === null || _gesture$current$star2 === void 0 ? void 0 : _gesture$current$star2.getTime()) !== null && _gesture$current$star !== void 0 ? _gesture$current$star : 0);\n      cb && cb(_objectSpread(_objectSpread({}, gesture.current), {}, {\n        duration: duration,\n        originalEvent: e\n      }));\n    });\n  };\n\n  var enterHandler = useEventListener(usePointerHover ? \"pointerenter\" : \"mouseenter\", onEnter);\n  var leaveHandler = useEventListener(usePointerHover ? \"pointerleave\" : \"mouseleave\", onLeave);\n  var startHandler = useEventListener(events[0], function (e) {\n    gesture.current = initGesture(coordX(e), coordY(e));\n    handle(e, [onStart, onStartX, onStartY]); // 1 line, 2 bad specs, 2 workarounds:\n\n    subscribe(touchEnabled() ? // Touch events fire on initial target, and won't bubble if its removed\n    // see: #235, #1968, https://stackoverflow.com/a/45760014\n    e.target : // Mouse events fire on the element under pointer, so we lose move / end\n    // if pointer goes outside container.\n    // Can be fixed by PointerEvents' setPointerCapture later\n    document);\n  }, {\n    capture: useCapture,\n    passive: false\n  });\n  var containerRef = useExternRef(getRootRef);\n  useIsomorphicLayoutEffect(function () {\n    var el = containerRef.current;\n\n    if (el) {\n      enterHandler.add(el);\n      leaveHandler.add(el);\n      startHandler.add(el);\n    }\n  }, [Component]);\n\n  function onMove(e) {\n    var _gesture$current2;\n\n    var _ref2 = (_gesture$current2 = gesture.current) !== null && _gesture$current2 !== void 0 ? _gesture$current2 : {},\n        isPressed = _ref2.isPressed,\n        isX = _ref2.isX,\n        isY = _ref2.isY,\n        _ref2$startX = _ref2.startX,\n        startX = _ref2$startX === void 0 ? 0 : _ref2$startX,\n        _ref2$startY = _ref2.startY,\n        startY = _ref2$startY === void 0 ? 0 : _ref2$startY;\n\n    if (isPressed) {\n      var _gesture$current3; // смещения\n\n\n      var shiftX = coordX(e) - startX;\n      var shiftY = coordY(e) - startY; // абсолютные значения смещений\n\n      var shiftXAbs = Math.abs(shiftX);\n      var shiftYAbs = Math.abs(shiftY); // Если определяем мультитач, то прерываем жест\n\n      if (!!e.touches && e.touches.length > 1) {\n        return onEnd(e);\n      } // если мы ещё не определились\n\n\n      if (!isX && !isY) {\n        var willBeX = shiftXAbs >= slideThreshold && shiftXAbs > shiftYAbs;\n        var willBeY = shiftYAbs >= slideThreshold && shiftYAbs > shiftXAbs;\n        var willBeSlidedX = willBeX && (!!onMoveX || !!_onMove);\n        var willBeSlidedY = willBeY && (!!onMoveY || !!_onMove);\n        Object.assign(gesture.current, {\n          isY: willBeY,\n          isX: willBeX,\n          isSlideX: willBeSlidedX,\n          isSlideY: willBeSlidedY,\n          isSlide: willBeSlidedX || willBeSlidedY\n        });\n      }\n\n      if ((_gesture$current3 = gesture.current) !== null && _gesture$current3 !== void 0 && _gesture$current3.isSlide) {\n        Object.assign(gesture.current, {\n          shiftX: shiftX,\n          shiftY: shiftY,\n          shiftXAbs: shiftXAbs,\n          shiftYAbs: shiftYAbs\n        });\n        handle(e, [_onMove, gesture.current.isSlideX && onMoveX, gesture.current.isSlideY && onMoveY]);\n      }\n    }\n  }\n\n  function onEnd(e) {\n    var _gesture$current4;\n\n    var _ref3 = (_gesture$current4 = gesture.current) !== null && _gesture$current4 !== void 0 ? _gesture$current4 : {},\n        isPressed = _ref3.isPressed,\n        isSlide = _ref3.isSlide,\n        isSlideX = _ref3.isSlideX,\n        isSlideY = _ref3.isSlideY;\n\n    if (isPressed) {\n      handle(e, [_onEnd, isSlideY && onEndY, isSlideX && onEndX]);\n    }\n\n    didSlide.current = Boolean(isSlide);\n    gesture.current = {}; // Если это был тач-евент, симулируем отмену hover\n\n    if (touchEnabled()) {\n      onLeave && onLeave(e);\n    }\n\n    subscribe(null);\n  }\n\n  var listenerParams = {\n    capture: useCapture,\n    passive: false\n  };\n  var listeners = [useEventListener(events[1], onMove, listenerParams), useEventListener(events[2], onEnd, listenerParams), useEventListener(events[3], onEnd, listenerParams)];\n\n  function subscribe(el) {\n    if (el) {\n      listeners.forEach(function (l) {\n        return l.add(el);\n      });\n    }\n  }\n  /**\n   * Обработчик событий dragstart\n   * Отменяет нативное браузерное поведение для вложенных ссылок и изображений\n   */\n\n\n  var onDragStart = function onDragStart(e) {\n    var target = e.target;\n\n    if (target.tagName === \"A\" || target.tagName === \"IMG\") {\n      e.preventDefault();\n    }\n  };\n  /**\n   * Обработчик клика по компоненту\n   * Отменяет переход по вложенной ссылке, если был зафиксирован свайп\n   */\n\n\n  var postGestureClick = function postGestureClick(e) {\n    if (!didSlide.current) {\n      return onClickCapture && onClickCapture(e);\n    } // eslint-disable-next-line no-restricted-properties\n\n\n    if (e.target.closest(\"a\")) {\n      e.preventDefault();\n    }\n\n    if (noSlideClick) {\n      e.stopPropagation();\n    } else {\n      onClickCapture && onClickCapture(e);\n    }\n\n    didSlide.current = false;\n  };\n\n  return createScopedElement(Component, _extends({}, restProps, {\n    onDragStart: onDragStart,\n    onClickCapture: postGestureClick,\n    ref: containerRef\n  }));\n};\n\nfunction initGesture(startX, startY) {\n  return {\n    startX: startX,\n    startY: startY,\n    startT: new Date(),\n    duration: 0,\n    isPressed: true,\n    isY: false,\n    isX: false,\n    isSlideX: false,\n    isSlideY: false,\n    isSlide: false,\n    shiftX: 0,\n    shiftY: 0,\n    shiftXAbs: 0,\n    shiftYAbs: 0\n  };\n}","map":null,"metadata":{},"sourceType":"module"}