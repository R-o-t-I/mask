{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"Component\", \"onClose\", \"restoreFocus\", \"timeout\", \"getRootRef\", \"children\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { useGlobalEventListener } from \"../../hooks/useGlobalEventListener\";\nimport { useTimeout } from \"../../hooks/useTimeout\";\nimport { FOCUSABLE_ELEMENTS_LIST, Keys, pressedKey } from \"../../lib/accessibility\";\nimport { useDOM } from \"../../lib/dom\";\nimport { useIsomorphicLayoutEffect } from \"../../lib/useIsomorphicLayoutEffect\";\nimport { noop } from \"../../lib/utils\";\nimport { AppRootContext } from \"../AppRoot/AppRootContext\";\nvar FOCUSABLE_ELEMENTS = FOCUSABLE_ELEMENTS_LIST.join();\nexport var FocusTrap = function FocusTrap(_ref) {\n  var _ref$Component = _ref.Component,\n      Component = _ref$Component === void 0 ? \"div\" : _ref$Component,\n      _ref$onClose = _ref.onClose,\n      onClose = _ref$onClose === void 0 ? noop : _ref$onClose,\n      _ref$restoreFocus = _ref.restoreFocus,\n      restoreFocus = _ref$restoreFocus === void 0 ? true : _ref$restoreFocus,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? 0 : _ref$timeout,\n      getRootRef = _ref.getRootRef,\n      children = _ref.children,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var ref = useExternRef(getRootRef);\n\n  var _useDOM = useDOM(),\n      document = _useDOM.document,\n      window = _useDOM.window;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusableNodes = _React$useState2[0],\n      setFocusableNodes = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      restoreFocusTo = _React$useState4[0],\n      setRestoreFocusTo = _React$useState4[1]; // HANDLE TRAP MOUNT\n\n\n  var _React$useContext = React.useContext(AppRootContext),\n      keyboardInput = _React$useContext.keyboardInput;\n\n  var focusOnTrapMount = useTimeout(function () {\n    var _ref$current;\n\n    if (keyboardInput && !((_ref$current = ref.current) !== null && _ref$current !== void 0 && _ref$current.contains(document.activeElement)) && focusableNodes !== null && focusableNodes !== void 0 && focusableNodes.length) {\n      focusableNodes[0].focus();\n    }\n  }, timeout);\n  useIsomorphicLayoutEffect(function () {\n    focusOnTrapMount.set();\n  }, []); // HANDLE FOCUSABLE NODES\n\n  useIsomorphicLayoutEffect(function () {\n    if (!ref.current) {\n      return noop();\n    }\n\n    var nodes = [];\n    Array.prototype.forEach.call( // eslint-disable-next-line no-restricted-properties\n    ref.current.querySelectorAll(FOCUSABLE_ELEMENTS), function (focusableEl) {\n      var _getComputedStyle = window.getComputedStyle(focusableEl),\n          display = _getComputedStyle.display,\n          visibility = _getComputedStyle.visibility;\n\n      if (display !== \"none\" && visibility !== \"hidden\") {\n        nodes.push(focusableEl);\n      }\n    });\n\n    if (nodes !== null && nodes !== void 0 && nodes.length) {\n      setFocusableNodes(nodes);\n    }\n\n    return noop();\n  }, [children]); // HANDLE TRAP UNMOUNT\n\n  var focusOnTrapUnmount = useTimeout(function () {\n    if (restoreFocusTo) {\n      restoreFocusTo.focus();\n    }\n  }, timeout);\n  useIsomorphicLayoutEffect(function () {\n    if (restoreFocus && document.activeElement) {\n      setRestoreFocusTo(document.activeElement);\n      return function () {\n        focusOnTrapUnmount.set();\n      };\n    }\n\n    return noop();\n  }, [restoreFocus]);\n\n  var onDocumentKeydown = function onDocumentKeydown(e) {\n    if (pressedKey(e) === Keys.TAB && focusableNodes !== null && focusableNodes !== void 0 && focusableNodes.length) {\n      var lastIdx = focusableNodes.length - 1;\n      var targetIdx = focusableNodes.findIndex(function (node) {\n        return node === e.target;\n      });\n      var shouldFocusFirstNode = targetIdx === -1 || targetIdx === lastIdx && !e.shiftKey;\n\n      if (shouldFocusFirstNode || targetIdx === 0 && e.shiftKey) {\n        e.preventDefault();\n        var node = focusableNodes[shouldFocusFirstNode ? 0 : lastIdx];\n\n        if (node !== document.activeElement) {\n          node.focus();\n        }\n\n        return false;\n      }\n    }\n\n    if (pressedKey(e) === Keys.ESCAPE) {\n      onClose();\n    }\n\n    return true;\n  };\n\n  useGlobalEventListener(document, \"keydown\", onDocumentKeydown, {\n    capture: true\n  });\n  return createScopedElement(Component, _extends({\n    ref: ref\n  }, restProps), children);\n};","map":null,"metadata":{},"sourceType":"module"}