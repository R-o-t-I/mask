{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"mode\", \"onRemove\", \"removePlaceholder\", \"onDragFinish\", \"before\", \"after\", \"disabled\", \"removable\", \"draggable\", \"selectable\", \"Component\", \"onChange\", \"name\", \"value\", \"checked\", \"defaultChecked\", \"getRootRef\", \"draggerLabel\", \"className\", \"style\"],\n    _excluded2 = [\"dragging\", \"rootElRef\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { classNames } from \"../../lib/classNames\";\nimport { noop } from \"../../lib/utils\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { ANDROID, IOS, VKCOM } from \"../../lib/platform\";\nimport SimpleCell from \"../SimpleCell/SimpleCell\";\nimport { Removable } from \"../Removable/Removable\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { useDraggable } from \"./useDraggable\";\nimport { ListContext } from \"../List/ListContext\";\nimport { CellDragger } from \"./CellDragger/CellDragger\";\nimport { CellCheckbox } from \"./CellCheckbox/CellCheckbox\";\nvar warn = warnOnce(\"Cell\");\nexport var Cell = function Cell(_ref) {\n  var propsMode = _ref.mode,\n      _ref$onRemove = _ref.onRemove,\n      _onRemove = _ref$onRemove === void 0 ? noop : _ref$onRemove,\n      _ref$removePlaceholde = _ref.removePlaceholder,\n      removePlaceholder = _ref$removePlaceholde === void 0 ? \"Удалить\" : _ref$removePlaceholde,\n      onDragFinish = _ref.onDragFinish,\n      before = _ref.before,\n      after = _ref.after,\n      disabled = _ref.disabled,\n      deprecatedRemovable = _ref.removable,\n      draggable = _ref.draggable,\n      deprecatedSelectable = _ref.selectable,\n      Component = _ref.Component,\n      onChange = _ref.onChange,\n      name = _ref.name,\n      value = _ref.value,\n      checked = _ref.checked,\n      defaultChecked = _ref.defaultChecked,\n      getRootRef = _ref.getRootRef,\n      _ref$draggerLabel = _ref.draggerLabel,\n      draggerLabel = _ref$draggerLabel === void 0 ? \"Перенести ячейку\" : _ref$draggerLabel,\n      className = _ref.className,\n      style = _ref.style,\n      restProps = _objectWithoutProperties(_ref, _excluded); // TODO: удалить перед 5.0.0\n\n\n  var mode = propsMode;\n\n  if (!propsMode && (deprecatedSelectable || deprecatedRemovable)) {\n    mode = deprecatedSelectable ? \"selectable\" : \"removable\";\n\n    if (process.env.NODE_ENV === \"development\") {\n      deprecatedSelectable && warn('Свойство selectable устарелo и будет удалено в 5.0.0. Используйте mode=\"selectable\".');\n      deprecatedRemovable && warn('Свойство removable устарелo и будет удалено в 5.0.0. Используйте mode=\"removable\".');\n    }\n  } // /end TODO\n\n\n  var selectable = mode === \"selectable\";\n  var removable = mode === \"removable\";\n  var platform = usePlatform();\n\n  var _useDraggable = useDraggable({\n    onDragFinish: onDragFinish\n  }),\n      dragging = _useDraggable.dragging,\n      rootElRef = _useDraggable.rootElRef,\n      draggableProps = _objectWithoutProperties(_useDraggable, _excluded2);\n\n  var _React$useContext = React.useContext(ListContext),\n      toggleDrag = _React$useContext.toggleDrag;\n\n  React.useEffect(function () {\n    if (dragging) {\n      toggleDrag(true);\n      return function () {\n        return toggleDrag(false);\n      };\n    }\n\n    return undefined;\n  }, [dragging, toggleDrag]);\n  var dragger;\n\n  if (draggable) {\n    dragger = createScopedElement(CellDragger, _extends({\n      vkuiClass: \"Cell__dragger\",\n      \"aria-label\": draggerLabel\n    }, draggableProps));\n  }\n\n  var checkbox;\n\n  if (selectable) {\n    var checkboxProps = {\n      name: name,\n      value: value,\n      onChange: onChange,\n      defaultChecked: defaultChecked,\n      checked: checked,\n      disabled: disabled\n    };\n    checkbox = createScopedElement(CellCheckbox, _extends({\n      vkuiClass: \"Cell__checkbox\"\n    }, checkboxProps));\n  }\n\n  var simpleCellDisabled = draggable && !selectable || removable || disabled;\n  var hasActive = !simpleCellDisabled && !dragging;\n  var cellClasses = classNames(getClassName(\"Cell\", platform), {\n    \"Cell--dragging\": dragging,\n    \"Cell--removable\": removable,\n    \"Cell--selectable\": selectable,\n    \"Cell--disabled\": disabled\n  });\n  var simpleCell = createScopedElement(SimpleCell, _extends({\n    hasActive: hasActive,\n    hasHover: hasActive\n  }, restProps, {\n    vkuiClass: \"Cell__content\",\n    disabled: simpleCellDisabled,\n    Component: selectable ? \"label\" : Component,\n    before: createScopedElement(React.Fragment, null, draggable && (platform === ANDROID || platform === VKCOM) && dragger, selectable && checkbox, before),\n    after: createScopedElement(React.Fragment, null, draggable && platform === IOS && dragger, after)\n  }));\n\n  if (removable) {\n    return createScopedElement(Removable, {\n      vkuiClass: cellClasses,\n      className: className,\n      style: style,\n      getRootRef: rootElRef,\n      removePlaceholder: removePlaceholder,\n      onRemove: function onRemove(e) {\n        return _onRemove(e, rootElRef === null || rootElRef === void 0 ? void 0 : rootElRef.current);\n      }\n    }, simpleCell);\n  }\n\n  return createScopedElement(\"div\", {\n    vkuiClass: cellClasses,\n    className: className,\n    style: style,\n    ref: rootElRef\n  }, simpleCell);\n};","map":null,"metadata":{},"sourceType":"module"}