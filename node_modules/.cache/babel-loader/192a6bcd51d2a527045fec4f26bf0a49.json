{"ast":null,"code":"import _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\n\nvar findAllIncludes = function findAllIncludes() {\n  var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var search = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  var includes = [];\n  var i = target.indexOf(search);\n\n  while (i !== -1) {\n    includes.push(i);\n    i = target.indexOf(search, i + 1);\n  }\n\n  return includes;\n};\n\nvar letterRegexp; // На момент написания флаг u не поддерживался рядом браузеров, поэтому добавили фоллбэк.\n\ntry {\n  letterRegexp = new RegExp(\"\\\\p{L}\", \"u\");\n} catch (e) {}\n\nexport var defaultFilterFn = function defaultFilterFn() {\n  var _getOptionLabel;\n\n  var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var option = arguments.length > 1 ? arguments[1] : undefined;\n  var getOptionLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (option) {\n    return option.label;\n  };\n  query = query.toLocaleLowerCase();\n  var label = (_getOptionLabel = getOptionLabel(option)) === null || _getOptionLabel === void 0 ? void 0 : _getOptionLabel.toLocaleLowerCase();\n\n  if (label !== null && label !== void 0 && label.startsWith(query)) {\n    return true;\n  }\n\n  var includes = findAllIncludes(label, query); // Ищем вхождение перед началом которого не буква\n\n  if (letterRegexp && label) {\n    var _iterator = _createForOfIteratorHelper(includes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _index = _step.value;\n\n        if (!letterRegexp.test(label[_index - 1])) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else {\n    // если regexp не поддерживается, то ищем любое вхождение\n    return includes.length > 0;\n  }\n\n  return false;\n};","map":null,"metadata":{},"sourceType":"module"}