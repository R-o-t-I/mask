{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"targetRef\", \"children\", \"getRef\", \"placement\", \"onPlacementChange\", \"arrow\", \"arrowClassName\", \"sameWidth\", \"offsetDistance\", \"offsetSkidding\", \"forcePortal\", \"style\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { usePopper } from \"react-popper\";\nimport { AppRootPortal } from \"../AppRoot/AppRootPortal\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { useIsomorphicLayoutEffect } from \"../../lib/useIsomorphicLayoutEffect\";\nvar ARROW_PADDING = 8;\nvar ARROW_WIDTH = 20;\nvar ARROW_HEIGHT = 8;\nexport var Popper = function Popper(_ref) {\n  var _targetRef$current3;\n\n  var targetRef = _ref.targetRef,\n      children = _ref.children,\n      getRef = _ref.getRef,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? \"bottom-start\" : _ref$placement,\n      onPlacementChange = _ref.onPlacementChange,\n      arrow = _ref.arrow,\n      arrowClassName = _ref.arrowClassName,\n      sameWidth = _ref.sameWidth,\n      _ref$offsetDistance = _ref.offsetDistance,\n      offsetDistance = _ref$offsetDistance === void 0 ? 8 : _ref$offsetDistance,\n      _ref$offsetSkidding = _ref.offsetSkidding,\n      offsetSkidding = _ref$offsetSkidding === void 0 ? 0 : _ref$offsetSkidding,\n      _ref$forcePortal = _ref.forcePortal,\n      forcePortal = _ref$forcePortal === void 0 ? true : _ref$forcePortal,\n      compStyles = _ref.style,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      popperNode = _React$useState2[0],\n      setPopperNode = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      smallTargetOffsetSkidding = _React$useState4[0],\n      setSmallTargetOffsetSkidding = _React$useState4[1];\n\n  var platform = usePlatform();\n  var setExternalRef = useExternRef(getRef, setPopperNode);\n  var modifiers = React.useMemo(function () {\n    var modifiers = [{\n      name: \"preventOverflow\"\n    }, {\n      name: \"offset\",\n      options: {\n        offset: [arrow ? offsetSkidding - smallTargetOffsetSkidding : offsetSkidding, arrow ? offsetDistance + ARROW_HEIGHT : offsetDistance]\n      }\n    }, {\n      name: \"flip\"\n    }];\n\n    if (arrow) {\n      modifiers.push({\n        name: \"arrow\",\n        options: {\n          padding: ARROW_PADDING\n        }\n      });\n    }\n\n    if (sameWidth) {\n      var _sameWidth = {\n        name: \"sameWidth\",\n        enabled: true,\n        phase: \"beforeWrite\",\n        requires: [\"computeStyles\"],\n        fn: function fn(_ref2) {\n          var state = _ref2.state;\n          state.styles.popper.width = \"\".concat(state.rects.reference.width, \"px\");\n        },\n        effect: function effect(_ref3) {\n          var state = _ref3.state;\n          state.elements.popper.style.width = \"\".concat(state.elements.reference.offsetWidth, \"px\");\n        }\n      };\n      modifiers.push(_sameWidth);\n    }\n\n    return modifiers;\n  }, [arrow, sameWidth, smallTargetOffsetSkidding, offsetSkidding, offsetDistance]);\n\n  var _usePopper = usePopper(targetRef.current, popperNode, {\n    placement: placement,\n    modifiers: modifiers\n  }),\n      styles = _usePopper.styles,\n      state = _usePopper.state,\n      attributes = _usePopper.attributes;\n\n  var resolvedPlacement = state === null || state === void 0 ? void 0 : state.placement;\n  var isEdgePlacement = !!resolvedPlacement && resolvedPlacement.includes(\"-\"); // true, если поппер отрисован скраю\n  // Если поппер рисуется скраю, то нужно опционально сместить его в тех случаях, когда стрелка не дотягивается до\n  // таргета из-за маленьких размеров последнего\n\n  useIsomorphicLayoutEffect(function () {\n    if (arrow && isEdgePlacement) {\n      var _ref4, _targetRef$current, _targetRef$current2;\n\n      var placementDirection = resolvedPlacement !== null && resolvedPlacement !== void 0 && resolvedPlacement.startsWith(\"bottom\") || resolvedPlacement !== null && resolvedPlacement !== void 0 && resolvedPlacement.startsWith(\"top\") ? \"vertical\" : \"horizontal\";\n      var arrowSize = placementDirection === \"vertical\" ? ARROW_WIDTH : ARROW_HEIGHT;\n      var targetSize = (_ref4 = placementDirection === \"vertical\" ? (_targetRef$current = targetRef.current) === null || _targetRef$current === void 0 ? void 0 : _targetRef$current.offsetWidth : (_targetRef$current2 = targetRef.current) === null || _targetRef$current2 === void 0 ? void 0 : _targetRef$current2.offsetHeight) !== null && _ref4 !== void 0 ? _ref4 : 0;\n\n      if (targetSize < arrowSize + 2 * ARROW_PADDING) {\n        setSmallTargetOffsetSkidding(ARROW_PADDING + arrowSize / 2);\n      }\n    } else {\n      setSmallTargetOffsetSkidding(0);\n    }\n  }, [arrow, isEdgePlacement]);\n  React.useEffect(function () {\n    if (resolvedPlacement) {\n      onPlacementChange && onPlacementChange({\n        placement: resolvedPlacement\n      });\n    }\n  }, [onPlacementChange, resolvedPlacement]);\n  var dropdown = createScopedElement(\"div\", _extends({}, restProps, attributes.popper, {\n    vkuiClass: getClassName(\"Popper\", platform),\n    ref: setExternalRef,\n    style: _objectSpread(_objectSpread(_objectSpread({}, compStyles), styles.popper), {}, {\n      minWidth: sameWidth ? (_targetRef$current3 = targetRef.current) === null || _targetRef$current3 === void 0 ? void 0 : _targetRef$current3.scrollWidth : undefined\n    })\n  }), arrow && createScopedElement(\"div\", _extends({}, attributes.arrow, {\n    vkuiClass: \"Popper__arrow\",\n    \"data-popper-arrow\": true,\n    style: styles.arrow\n  }), createScopedElement(\"svg\", {\n    vkuiClass: \"Popper__arrow-in\",\n    className: arrowClassName,\n    width: \"20\",\n    height: \"8\",\n    viewBox: \"0 0 20 8\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, createScopedElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M10 0C13 0 15.9999 8 20 8H0C3.9749 8 7 0 10 0Z\",\n    fill: \"currentColor\"\n  }))), createScopedElement(\"div\", {\n    vkuiClass: \"Popper__content\"\n  }, children));\n  return createScopedElement(AppRootPortal, {\n    forcePortal: forcePortal,\n    vkuiClass: \"PopperPortal\"\n  }, dropdown);\n};","map":null,"metadata":{},"sourceType":"module"}