{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { createScopedElement } from \"../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { AdaptivityContext, SizeType, ViewHeight, ViewWidth } from \"../components/AdaptivityProvider/AdaptivityContext\";\nexport { SizeType, ViewWidth, ViewHeight };\nexport function withAdaptivity(TargetComponent, config) {\n  var AdaptivityConsumer = function AdaptivityConsumer(props) {\n    var context = React.useContext(AdaptivityContext);\n    var update = false;\n\n    if (props.sizeX || props.sizeY) {\n      update = true;\n    }\n\n    var sizeX = props.sizeX || context.sizeX;\n    var sizeY = props.sizeY || context.sizeY;\n    var viewWidth = context.viewWidth;\n    var viewHeight = context.viewHeight;\n    var hasMouse = context.hasMouse;\n    var deviceHasHover = context.deviceHasHover;\n    var adaptivityProps = {};\n    config.sizeX ? adaptivityProps.sizeX = sizeX : undefined;\n    config.sizeY ? adaptivityProps.sizeY = sizeY : undefined;\n    config.viewWidth ? adaptivityProps.viewWidth = viewWidth : undefined;\n    config.viewHeight ? adaptivityProps.viewHeight = viewHeight : undefined;\n    config.hasMouse ? adaptivityProps.hasMouse = hasMouse : undefined;\n    config.deviceHasHover ? adaptivityProps.deviceHasHover = deviceHasHover : undefined;\n    var target = createScopedElement(TargetComponent, _extends({}, props, adaptivityProps));\n\n    if (update) {\n      return createScopedElement(AdaptivityContext.Provider, {\n        value: {\n          sizeX: sizeX,\n          sizeY: sizeY,\n          viewWidth: viewWidth,\n          viewHeight: viewHeight,\n          hasMouse: hasMouse,\n          deviceHasHover: deviceHasHover\n        }\n      }, target);\n    }\n\n    return target;\n  };\n\n  return AdaptivityConsumer;\n}","map":null,"metadata":{},"sourceType":"module"}